version: "3"

services:
  traefik:
    image: traefik:v3.1.6
    container_name: traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"                     # Enable Traefik's dashboard
      - "--api.insecure=true"  # Optional: Only for local testing. Use secure access in production.
      - "--providers.docker=true"                  # Enable Docker provider to discover containers
      - "--entrypoints.web.address=:80"            # Define HTTP entrypoint
      - "--entrypoints.websecure.address=:443"     # Define HTTPS entrypoint
      - "--certificatesresolvers.mytls.acme.tlschallenge=true"  # Enable TLS challenge for certs
      - "--certificatesresolvers.mytls.acme.email=incriszluv@gmail.com"  # Your email for ACME
      - "--certificatesresolvers.mytls.acme.storage=/letsencrypt/acme.json"  # Store certs and ensures renewal
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"  # Redirect HTTP to HTTPS
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"  # Ensure redirection uses HTTPS
    
    ports:
      - "80:80"      # Expose HTTP port
      - "443:443"    # Expose HTTPS port
      # - "8080:8080"  # Expose dashboard on port 8080

    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"  # Docker socket for Traefik to access containers
      - "./letsencrypt:/letsencrypt"   

  frontend:
    build:
      context: ./frontend
      dockerfile: Frontend-Dockerfile
    container_name: frontend
    ports:
      - "8080:8080"
      # - "9411:9411"
    environment:
      - AUTH_API_ADDRESS=http://auth-api:8081
      - TODOS_API_ADDRESS=http://todos-api:8082
    depends_on:
      - auth-api
      - todos-api
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.entrypoints=websecure"    # Ensure traffic is served over HTTPS
      - "traefik.http.routers.frontend.rule=Host(`bmp.com.ng`)"  # Domain for the frontend service
      - "traefik.http.routers.frontend.tls.certresolver=mytls"   # Use ACME resolver for SSL certs

  auth:
    build:
      context: ./auth-api
      dockerfile: Auth-Dockerfile
    container_name: auth-api
    ports:
      - "${AUTH_API_PORT}:8081"
    env_file:
      - .env
    depends_on:
      - users
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.entrypoints=websecure"    # Ensure traffic is served over HTTPS
      - "traefik.http.routers.auth.rule=Host(`auth.bmp.com.ng`)"  # Domain for the auth service
      - "traefik.http.routers.auth.tls.certresolver=mytls"   # Use ACME resolver for SSL certs

  todo:
    build:
      context: ./todos-api
      dockerfile: Todo-Dockerfile
    container_name: todos-api
    ports:
      - "8082:8082"
    env_file:
      - .env
    depends_on:
      - redis-queue
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.todos.entrypoints=websecure"    # Ensure traffic is served over HTTPS
      - "traefik.http.routers.todos.rule=Host(`todos.bmp.com.ng`)"  # Domain for the todos service
      - "traefik.http.routers.todos.tls.certresolver=mytls"   # Use ACME resolver for SSL certs

  users:
    build:
      context: ./users-api
      dockerfile: User-Dockerfile
    container_name: users-api
    ports:
      - "${SERVER_PORT}:8083"
    env_file:
      - .env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.users.entrypoints=websecure"    # Ensure traffic is served over HTTPS
      - "traefik.http.routers.users.rule=Host(`users.bmp.com.ng`)"  # Domain for the users service
      - "traefik.http.routers.users.tls.certresolver=mytls"   # Use ACME resolver for SSL certs

  log-processor:
    build:
      context: ./log-message-processor
      dockerfile: Log-Dockerfile
    container_name: log
    env_file:
      - .env
    depends_on:
      - redis-queue

  redis:
    image: redis:alpine
    container_name: redis-queue
    restart: always
    ports:
      - "6379:6379"
    env_file:
      - .env

  # zipkin:
  #   image: openzipkin/zipkin
  #   container_name: zipkin
  #   ports:
  #     - "9411:9411"
  #   env_file:
  #     - .env

 

networks:
  default:
    name: devops_network
